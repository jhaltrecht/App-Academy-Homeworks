q
@next_mover_mark
@board.winner
@board.won?
@board.win?
@board.win
@next_mover_mark
evaluator
q
c
q
@next_mover_mark
@board.winner
board.winner
evaluator
board.won?
board.won? && board.winner != evaluator
quit
clear
board.winner == evaluator
q
             board.won? && board.winner != evaluator
q
n
   178:         end
@example_group_instance = nil
 @example_group_instance
   178:         end @example_group_instance
=> 177:           @example_group_instance = nil
   176:           end
   175:             @example_group_instance.instance_variable_set(ivar, nil)
@example_group_instance.instance_variables.each do |ivar|
finish(reporter)
n
s
 find_hook(hook, scope, example_or_group, initial_procsy).run
s
actual
@actual
actual
s
n
new(value)
(value)
s
block
value
syntax_host
n
self
q
c
n
 @board.winner
q
n
s
@board.winner
self
quit
!@board.winner.nil?
q
c
s
q
n
c
s
q
bool
n
q
block
value
s
triple == [:x, :x, :x]
n
s
@rows
Wrows
s
 return true if !@board.winner.nil?
c
n
s
!@board.winner.nil?
n
q
self
c
s
puts "hi" if !@board.winner.nil?
s
self
q
n
q
self
q
@board
@board.winner
c
n
s
@board.winner
c
n
display evaluator
c
n
q
self
children
child
q
n
puts "hi" if @board.winner
puts "hi" if @board.won?
return true if @board.winner  
 @board.winner  
n
s
@board.winner  
c
@board.winner  
evaluator
@next_mover_mark
@board.winner
return true if @board.winner 
s
@board
evaluator
c
s
@next_mover_mark
evaluator
@board
q
@board
@boar
c
n
@board
n
@next_mover_mark
evaluator
q
c
n
display @board
q
self
q
n
self
q
qy
self
child
children
child
children.none?{|child| child.losing_node?(evaluator)}
children.all?{|child| child.losing_node?(evaluator)}
 return children.all?{|child| child.losing_node?(evaluator)}
q
children.none?{|child| child.losing_node?(evaluator)}
children.any?{|child| child.losing_node?(evaluator)}
children.all?{|child| child.losing_node?(evaluator)}
q
n
@board
q
n
s
@board
c
n
s
@board.winner
@board.winner?
evaluator
@board
c
n
display @board
n
@board
q
c
q
s
n
q
n
q
c
q
c
n
m
n
@board
q
display evaluator
child
c
n
quit
c
n
s
@board.winner.nil?
@board.tied?
@board.tied
@board
c
n
s
q
s
next_mover_mark_temp
q
c
n
node.rows[row][col]=@next_mover_mark
c
n
node.rows[row][col]=@next_mover_mark
c
s
node.rows[row][col]=@next_mover_mark
q
c
s
ss
s
q
s
node.rows[row][col]=@next_mover_mark
q
node.next_mover_mark
quit
s
q
node.next_mover_mark
node.next_mover_mark== :x ? :o : :x
s
node.rows[row][col]=next_mover_mark
q
n
q
                  end
                    prev_move_pos=pos
if node.next_mover_mark== :x ? :o : :x
q
if node.next_mover_mark== :x ? :o : :x

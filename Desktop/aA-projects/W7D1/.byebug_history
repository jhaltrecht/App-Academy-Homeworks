q
start_pos==end_pos 
self[end_pos]!=sentinel
self[start_pos].color != self[end_pos].color
self[end_pos].color
self[start_pos].color 
q
self[start_pos].color 
render
self[end_pos]
self[start_pos]
(self[end_pos]!=sentinel && self[start_pos].color != self[end_pos.color])
q
c
q
render
self[end_pos]
self[end_pos]!=sentinel
self[start_pos]==sentinel
self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos
if self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos
self[start_pos]==sentinel 
s
if false or false
self[start_pos]==sentinel 
n
s
self[start_pos]==sentinel 
q
c
n
s
       raise "invalid position" if self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos 
self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos 
self[start_pos]==sentinel
self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos
q
self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos
c
self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos
c
self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos
c
self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos
c
self[start_pos]==sentinel || self[end_pos]!=sentinel || start_pos==end_pos
c
n
q
c
n
s
render
col.pos
col.moves
q
c
q
@board.empty?
@board.empty?([row+2,col])
at_start_row?
self.pos
self
col.pos
@board.render
render
movesArr
n
s
col.moves
c
display col
c
n
display col
n
col
q
col
c
s
col.pos
col.row
col.at_start_row?
@rows[6][4]
self[[6,4]]==sentinel
self[[6,4]]
col.pos
pos
col.moves
col.side_attacks
col.forward_dirs
col.moves
col.pos
render
col.symbol
col.move_dirs
col.moves
row
col.color
col.symbol
self
col.pos
col.moves
render
color
col.color
s
col.is_a?(Pawn)
col.is_a?(NullPiece)
col.is_a?(Array)
col.is_a(Array)
col
render
n
c
display col
display row
c
q
render
row
col
c
n
display row
n
display col
display col.moves.include?(kingPos) 
n
col.moves.include?(kingPos) 
col.moves
col
n
s
q
display q
n
nn
c
n
display row
n
display col
q
col.is_a?(Array)
q
row
@rows.include?(col)
@rows
col
q
s
c
col
@rows
q
row
col
@rows
q
row
@rows
q
@rows
row
col.moves
col
q
col.is_a?(NullPiece)
col.moves
col.moves.include?(kingPos) && col.color!=color
render
row
col
q
col
q
c
q
c
n
row
col
col.moves
col.moves.include?(kingPos) 
col
col.moves.include?(kingPos) && col.color!=color
n
c
n
col.color
n
nn
n
s
n
render
c
n
s
n
display row
n
display kingPos
kingPos
n
col.color
render
n
display col.moves
display col
col
n
render
col
s
n
s
col.moves
col
row
col
c
n
s
n
s
n
s
n
render
n
s
n
s
n
display row
display color
display col
col
s
n
s
n
s
c
render
@rows
n
display pos
s
display pos
c
display pos
pos

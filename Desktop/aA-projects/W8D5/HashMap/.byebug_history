c
q
goal
result.sort
result
goal
result.sort
n
s
c
q
[k,v]
result << [k, v]
goal
s
q
n
s
n
s
result
s
q
result
s
result.sort
result
s
n
s
c
q
y
q
s
yield node
s
next_node==@tail
s
next_node=@head.next
s
q
qy
node
q
c
s
q
next_node
next_node==@tail
s
node
s
node
s
bucket
s
@store.each
@store
q
c
s
next_node==@tail
until next_node==@tail
s
q
s
next_node=@head.next
s
q
c
s
bucket(key).get(key)
      debugger
s
 get(key)
q
c
s
bucket(key).get(key)
bucket(key)
s
get(key)
get(key).val=val
n
s
q
c
s
bucket(key).include?(key)
s
!include?(key)
val
key
c
q
n
q
qy
self
node
node.key==key
n
c
q
n
node.next
node.prev
s
  next_node.prev=prev_node 
next_node.prev=prev_node 
s
prev_node=node.prev
node.next
node.prev
n
s
next_node
n
s
q
c
@head.next
s
q
node.next
s
node.prev
s
next_node
s
next_node=@head.next
@head.next
s
q
next_node=@he
@head.next
self
@head.next
@head
next_node==@tail
s
q
s
yield next_node
next_node
yield next_node
s
q
n
s
q
n
q
c
q
 prev_node=self.prev
s
q
s
q
n
c
quit
n
nn
n
s
q
self
@prev
q
self
prev_node
n
c
q
quit
@next
@prev
self.prev
self.next
n
self.next
c
n
nn
n
nn
n
s
c
n
s
node
quit
node.next=nil
display node.next=nil
node.next=nil
q
next_node
n
self.prev
q
self.next
self
self.prev
n
self.next.prev=self.prev
quit
self
self.next.prev
self
s
key
display node.key
s
n
s
q
c
n
s
node
s
n
s
q
@tail
@head.next
@head.next==@tail
c
n
@head.next==@tail
q
self
c
n
s
@head.next==@tail
self
q
n
@head.next==@tail
@head@head.next==@tail
n
s
@head.next==@tail
n
s
@head.next==@tail
@tail
@head.next

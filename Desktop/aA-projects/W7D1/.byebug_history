c
q
checkedEl
n
render
q
c
q
render
c
q
s
quit
bool
q
col.color
col
q
c
color
render
c
n
render
col
c
n
col.moves.include?(kingPos) && col.color!=color
col.moves.include?(kingPos)
kingPos
col
render
color
col.moves
c
col.moves
n
display potNewPosition
s
col.moves
color
kingPos
col.moves.include?(kingPos)
quit
@board.render
@board.in_check?(color)
in_check?(color)
n
display col
n
s
n
s
n
render
s
move
color
piece
@board.in_check?(color)
n
move
@pos
n
move
@pos
oldPiece
n
@board[move]
n
display move
s
movesArr
n
movesArr
n
piece
movesArr
n
unblockMovesArr
n
unblockMovesArr
n
unblockMovesArr
n
potNewPosition
piece
color
c
q
c
color
c
color
c
color
c
color
c
color
c
color
pos
c
color
pos
c
color
pos
q
c
q
piece
color
n
movesArr
n
movesArr
n
unblockMovesArr
n
s
n
unblockMovesArr
n
c
q
qy
render
potNewPosition
s
n
s
q
movesArr
n
s
n
movesArr
n
s
move_directions
n
s
c
s
q
movesArr
n
s
n
q
n
s
col.valid_moves
col.valid_moves.length>0
render
col
c
q
c
q
c
q
render
s
render
n
c
q
c
q
c
q
self[pos]
s
oldPiece
n
in_check?(color)
render
s
sentinel.pos
self[start_pos]=@sentinel
self[start_pos]=sentinel
self[start_pos]
self[end_pos].pos=end_pos
self[end_pos]
n
s
move
start_pos
c
q
c
q
y
q
s
n
self[move].is_a?(NullPiece)
render
@rows[1]
@rows[1][4]
@rows
move
self[move]
oldPiece
n
c
q
move
self[[move]]
c
q
n
s
n
s
n
s
c
n
c
q
render
col.valid_moves
color
col
n
q
col.color
col
n
q
n
s
n
q
n
s
n
s
n
c
q
n
s
col.moves.include?(kingPos) && col.color!=color
display col
col
pos
color
n
s
n
sn

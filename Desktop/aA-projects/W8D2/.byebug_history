q
s
current_max_range
n
max_range
s
q
current_max
s
n
max
min
n
q
c
s
arr[j]
arr[i]
(arr[i] + arr[j]) <=> target_sum
s
display j
display i
i
s
q
el
target_sum
hash[5]
hash[target_sum - el]
s
 hash[target_sum - el]
hash
s
hash[target_sum - el]
display el
s
n
<perm[0...idx] + word[-1] + perm[idx..-1]
n
perm[0...idx] + word[-1] + perm[idx..-1]
s
word[-1] + perm[idx..-1]
perm[0...idx]
perm
idx
s
perms
n
perm
n
display anagrams
perm[0...idx] + word[-1] + perm[idx..-1]
s
perms
q
perms
s
q
n
display perms
q
perms
anagrams
perms
s
idx
s
idx
s
anagrams
perm[0...idx] + word[-1] + perm[idx..-1]
s
perms.length
idx
perm[0...idx] + word[-1] + perm[idx..-1]
s
perm[0...idx] + word[-1] + perm[idx..-1]
s
perms
n
s
perms
n
word
anagrams
c
q
word
c
s
perm[0...idx] + word[-1] + perm[idx..-1]
s
perms.length
perm[0...idx] + word[-1] + perm[idx..-1]
s
perm[0...idx] + word[-1] + perm[idx..-1]
s
perms
s
perm[1..-1]
perm[1]
 perm[idx..-1]
perm[0...idx] + word[-1] + perm[idx..-1]
idx
s
perm[0..0]
perm[0...idx]
perm[0...idx] + word[-1] + perm[idx..-1]
s
perms
s
n
word
s
n
display perm
display perms
display word
quit
"mo".first
word[0]
word.first
word.fist
word
mo[0]
word.first
word
q
current_sum
display arr[idx1]
idx1
n
 largest_sum.nil? || largest_sum<current_sum
largest_sum
idx1
c
n
largest_sum
s
largest_sum.nil? || largest_sum<current_sum
largest_sum.nil?
largest_sum=current_sum if largest_sum.nil? || largest_sum<current_sum
largest_sum
q
largest_sum
current_sum
q
arr.length
display arr
display idx1
q
n
subArr.sum
s
sum
n

c
s
c
s
c
s
display unblockMovesArr
q
potNewPosition
display unblockMovesArr
q
unblockMovesArr
q
movesArr
q
c
n
potNewPosition
n
potNewPosition
c
s
q
c
potNewPosition
s
potNewPosition
s
self[pos]==nil
s
col
row
s
q
self.color!= @board[potNewPosition].color && @board.valid_pos?(potNewPosition)
s
row
s
col
row
s
potNewPosition
s
unblockMovesArr<<potNewPosition
s
@board.valid_pos?(potNewPosition) && @board.empty?(potNewPosition)
s
[row+dx,col+dy]
s
dx
@pos
s
dy
dx
s
n
row
row+dx
c
n
s
c
n
self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
if self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
col
row
s
col
row
row,col=pos
q
row
 if self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
q
row
 row,col=pos
pos
row
pos
self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
if self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
 return true  if self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
row>=0
self[pos]==nil
self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
q
s
self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
return true  if self[pos]==nil && row>=0 && row<=7 && col>=0 && col<=7
row>=0
q
@board[potNewPosition]
potNewPosition
@board
@board[potNewPosition].pos
s
@pos
s
@board
q
@board
c
q
@board
c
quit
@board
c
s
q
@board
@board[potNewPosition]
s
row
col
potNewPosition
unblockMovesArr<<@board[potNewPosition]
q
s
c
q
@board
potNewPosition
s
q
s
q
c
n
movesArrsdf
n
c
s
@pos
s
movesArr+=grow_unblocked_moves_in_dir(dx,dy)
movesArr
s
move_directions
s
DIAGONAL_DIRS
s
c
s
q
@VERTICAL_DIRS
@DIAGONAL_DIRS
s
q
s
q
move_dirs
move_directions
s
c
s
b[[0,2]]
 b.move_piece([1,1], [4,1])
q
b[0,2]
c
n
s
 puts "#{row} #{@rows[row].join}"
puts "#{row} #{@rows[row].join}
@rows[row].join
@rows
rows
puts "#{row} #{@rows[row].join}"
row
n
display row
n
q
puts "#{row} #{@rows[row].join}"
@rows
q
n
s
 puts "#{row} #{@rows[row].join}"
s
puts "#{row} #{@rows[row].join}
s
self
s
q
self
s
self[[3,3]]=piece
self[3,3]=piece
piece
self
s
self
s
self
s
q
c
piece
self
piece
self[[2,2]]=piece
self[2,2]=piece
piece
pos
piece
self[pos]
self
piece
s
piece
self
board
s
c
piece
self
s
piece
self
board
s
pos
self[pos]=piece
pos
self[pos]=piece
piece
s
self
board
s
n
self
s
piece
self[pos]
pos
piece
s
board
s
self
c
s
q
Bishop.new
Rook.new
piece_class
 piece_class.new(:white, self, [0, j])
s
display piece_class
s
n
s

c
q
end_pos
self[start_pos].moves
self[start_pos]
c
q
y
self[start_posq
c
n
end_pos
self[start_pos].moves
c
n
s
c
q
n
@current_player
n
c
n
s
@current_player == :white ? :black : :white
@current_player
s
c
q
c
n
s
@current_player
c
q
@players
@players[@current_player]
@current_player
@players
@current_player
q
y
q
@player1
@current_player
n
q
start_pos
c
q
row
s
c
cc
c
q
c
q
c
q
display
color
c
n
quit
@display
n
@display
@board
q
@display
n
s
q
Display.new(@board)
quit
@display
display
q
@display
quit
y
q
@current_player
  @current_player.make_move
c
q
self[end_pos]
n
c
n
in_check?(self[end_pos].color)
self[end_pos].color
n
q
color
find_king?(color)
n
s
self[end_pos].color
self[end_pos]
self[start_pos]
n
render
n
s
q
@board.render
render
@board.in_check?(color)
n
s
n
s
n
display @pos
n
@pos
n
s
end_pos
movesArr
n
s
 self[start_pos].valid_moves
quit
render
q
n
move
n
@pos
n
oldPiece
n
s
n
display move
move
n
move
s
n
movesArr
n
movesArr
n
unblockMovesArr
n
s
@board.valid_pos?(potNewPosition) && @board.empty?(potNewPosition)
self[start_pos].valid_moves.include?(end_pos)
potNewPosition
n
dx
display @pos
s
n
s
n
s
self[start_pos].valid_moves
render
self[start_pos]
self[start_pos].valid_moves
self[start_pos].valid_moves.include?(end_pos)
selself[start_pos].valid_moves.include?(end_pos)
quit
self[end_pos]
n
s
self[start_pos].color
self[end_pos].color
self[end_pos]
self[start_pos]
self[start_pos
c
q
self[start_pos]
self[end_pos]
n
c
q
c
q
self[end_pos].color
self[end_pos]
n
c
quit
color
n
s
n
s
quit
color
display col
display row
s
self[[0,5]].pos
self[[0,5]]
find_king?(color)
render
s
n
render
n
render
n
c
n
s
c
s
q
self[end_pos]
self[end_pos].pos
include?(self[end_pos]
self[start_pos].valid_moves
q
self[end_pos].pos
self[start_pos].pos=[9,9]
n
@sentinel
n
display self[start_pos]
self[start_pos]
display self[end_pos]
c
q
checkedEl
n
render
q
c
q
render
c
q
s
quit
bool
q
col.color
col
q
c
color
render
c
n
render
col
c
n
